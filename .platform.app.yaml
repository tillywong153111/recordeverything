name: "ll_project"  # 设置应用的名称为 "ll_project"
type: "python:3.10"  # 设置应用使用的运行环境为 Python 3.10

relationships:  # 定义应用关系
    database: "db:postgresql"  # 定义了一个名为 "database" 的关系，它连接到一个名为 "db" 的 PostgreSQL 服务

web:  # 定义了应用的 web 配置
    upstream:
        socket_family: unix  # 设置应用使用 Unix 套接字进行通信
    commands:
        start: "gunicorn -w 4 -b unix:$SOCKET ll_project.wsgi:application"  # 定义了启动应用的命令，使用 Gunicorn 作为 WSGI HTTP 服务器
    locations:
        "/":  # 定义了根 URL ("/") 的处理方式
            passthru: true  # 所有请求都将传递到应用
        "/static":  # 定义了 "/static" URL 的处理方式
            root: "static"  # 所有 "/static" 开头的 URL 都会被映射到 "static" 目录
            expires: 1h  # 设置缓存过期时间为1小时
            allow: true  # 允许访问

disk: 512  # 应用的持久磁盘大小为 512MB

mounts:  # 定义挂载点
    "logs":  # 定义了一个挂载点 "logs"
        source: local  # 挂载点的源是本地
        source_path: logs  # 将本地的 "logs" 目录挂载到应用中

hooks:  # 定义了在应用生命周期的不同阶段执行的钩子
    build: |  # 在构建阶段执行的钩子
        pip install --upgrade pip  # 更新 pip
        pip install -r requirements.txt  # 安装 requirements.txt 文件中指定的包
        pip install -r requirements_remote.txt  # 安装 requirements_remote.txt 文件中指定的包
        mkdir logs  # 创建 logs 目录
        python manage.py collectstatic  # 收集静态文件
        rm -rf logs  # 删除 logs 目录
    deploy: |  # 在部署阶段执行的钩子
        python manage.py migrate  # 执行数据库迁移
